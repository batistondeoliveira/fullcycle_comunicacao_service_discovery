consult agent -dev => Sobe o consul em dev

consul members => lista os membros do cluster que subiram com o comando consul agent -dev

curl localhost:8500/v1/catalog/nodes => ve os nodes que temos

apk -U add bind-tools => instala o dig no linux alpine. O dig serve para trabalhar com DNS

dig => Faz consultas no servidor DNS
dig @localhost -p 8600 => faz uma consulta no servidor
dig @localhost -p 8600 consul01.node.consul => lista dados do DNS
dig @localhost -p 8600 consul01.node.consul +short => Exibe somente o IP do DNS

ifconfig => igual ao ipconfig do windows, descobre o ip da rede

=== Sobe server ===
consul agent -server -bootstrap-expect=3 -node=consulserver01 -bind=172.19.0.3 -data-dir=/var/lib/consul -config-dir=/etc/consul.d => 
  * sobe o consul como server
  * indica para ele experar mais 3 servers
  * dou o nome do node
  * falo qual o ip do server (retirado do ifconfig)
  * falo onde ele deve armazenar as informações (observação: O diretorio tem que estar criado)
  * falo onde fica os arquivos de configuração (observação: O diretorio tem que estar criado)

Apos subir os servers, é necessário dar um join para que eles se conheçam.

consul join <ip> => consul join 172.19.0.4

=== Sobe client ==
consul agent -bind=172.19.0.5 -data-dir=/var/lib/consul -config-dir=/etc/consul.d => 

=== Registrar um serviço ===
Cria o arquivo services.json (o nome pode ser qq um)

Executar: 
consult reload => faz com que o consul atualize os servicos

Depois disso, se executar o comando
dig @localhost -p 8600 nginx.service.consul ou
dig @localhost -p 8600 web.nginx.service.consul => Pode executar em qq maquina que vai encontrar
curl localhost:8500/v1/catalog/services => busca no catalogo de servicos e vai exibir os serviços registrados 
consul catalog nodes -service nginx => Vai trazer em qual node (client/ip) o serviço do nginx está registrado
consul catalog nodes -detailed => traz todos os nodes registrados
Mais consultas, ver na documentação.

=== Sob client ===
consul agent -bind=172.19.0.5 -data-dir=/var/lib/consul -config-dir=/etc/consul.d -retry-join=172.19.0.3 => Sobe o client já registrado no server

Agora, se executarmos o comando
dig @localhost -p 8600 nginx.service.consul

Veremos que temos 2 ips (maquinas) com o mesmo serviço nginx

=== health check ===
* Faz a configuração no services.json do consul01
* Executa o consul reload
* instala o nginx
apk add nginx
* mkdir /run/nginx
* nginx
* ps => para verificar se o nginx tá no ar
* mkdir /usr/share/nginx/html -p => cria o diretorio, -p ele faz recursivo
* apk add vim
* vim /etc/nginx/conf.d/default.conf ou /etc/nginx/http.d/default.conf 
Edite o arquivo em cima, apaga a parte do 404 e coloque no lugar root /usr/share/nginx/html;
* vim /usr/share/nginx/html/index.html
Escreva Hello
* reinicie o nginx => nginx -s reload

=== Sincronizando servers via arquivo ===
* cria o arquivo server.json em servers/server01 (o nome do diretorio tanto faz)
* executa o docker-compose up -d novamente
* o server01 vai cair se estiver de pé
* entre no server01 novamente, docker exec -it consulserver01 sh
* consul agent -config-dir=/etc/consul.d

=== Trabalhando com criptografia ===
* Member ship
* Mutuo TLS, gera um certificado e gera os certificados do client 

Vamos fazer apenas o member ship
* consul keygen
* pega o resultado e coloca na chave encrypt de cada server.json
* rm -rf /tmp/* => para limpar qq arquivo antigos

Depois de tudo, podemos ver as mensagens que estão sendo passadas com o comando abaixo:
tcpdump -i eth0 -an port 8301 -A

